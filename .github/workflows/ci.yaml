name: Terraform CI/CD

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  TF_VAR_latitude_auth_token: ${{ secrets.LATITUDESH_AUTH_TOKEN }}
  TF_VERSION: "1.12.0"
  TFLINT_VERSION: latest

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Format Check
        run: terraform fmt -check -recursive
      
      - name: Terraform Init
        run: terraform init -backend=false
      
      - name: Terraform Validate
        run: terraform validate
    
  lint:
    name: Terraform Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Cache TFLint plugin dir
        uses: actions/cache@v4
        with:
          path: ~/.tflint.d/plugins
          key: tflint-${{ hashFiles('.tflint.hcl') }}
          restore-keys: |
            ${{ runner.os }}-tflint-
      
      - name: Install TFLint
        uses: terraform-linters/setup-tflint@v5
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}
      
      - name: Show TFLint version
        run: tflint --version

      - name: Initialize TFLint
        run: tflint --init

      - name: Verify TFLint config
        run: |
          echo "TFLint configuration:"
          cat .tflint.hcl
          echo
          echo "Available plugins:"
          ls -la ~/.tflint.d/plugins/ || echo "No plugins directory found"
      
      - name: Run TFLint
        run: tflint -f compact
  
  security:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          soft_fail: true

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          soft_fail: true

  test-examples:
    name: Test Examples
    runs-on: ubuntu-latest
    strategy:
      matrix:
        example:
          - simple-server
          - server-with-provisioner-inline
          - server-with-provisioner-local-exec
          - server-with-provisioner-script
          - server-with-provisioner-scripts
          - server-with-multiple-provisioners
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Generate test SSH keys
        run: |
          # Create test SSH keys for CI
          mkdir -p ~/.ssh/
          ssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa -N "" -C "ci-test-key"
          chmod 600 ~/.ssh/id_rsa
          chmod 644 ~/.ssh/id_rsa.pub
          echo "Generated test SSH key for CI"
          ls -la ~/.ssh/

      - name: Terraform Init - ${{ matrix.example }}
        working-directory: examples/${{ matrix.example }}
        run: terraform init -backend=false

      - name: Terraform Plan - ${{ matrix.example }}
        working-directory: examples/${{ matrix.example }}
        run: terraform plan
        env:
          TF_VAR_latitude_auth_token: "fake-token-for-plan"

  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup terraform-docs
        uses: terraform-docs/gh-actions@v1.4.1
        with:
          working-dir: .
          output-file: README.md
          output-method: inject
          git-push: "true"
          git-commit-message: "docs: update terraform-latitudesh-server-module"
  
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, lint, security, test-examples]
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate

      - name: Create Release Archive
        run: |
          tar -czf terraform-latitudesh-server-module-${{ github.event.release.tag_name }}.tar.gz \
            --exclude='.git*' \
            --exclude='*.tar.gz' \
            .

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./terraform-latitudesh-server-module-${{ github.event.release.tag_name }}.tar.gz
          asset_name: terraform-latitudesh-server-module-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip
